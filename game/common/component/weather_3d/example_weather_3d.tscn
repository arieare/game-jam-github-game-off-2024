[gd_scene load_steps=18 format=3 uid="uid://dp6iwyirop2h0"]

[ext_resource type="Script" path="res://common/component/weather_3d/world_env.gd" id="1_qdd0a"]
[ext_resource type="Script" path="res://common/component/weather_3d/module_day_weather.gd" id="1_undve"]
[ext_resource type="Script" path="res://common/component/weather_3d/world_lighting.gd" id="2_6dd63"]
[ext_resource type="Script" path="res://common/component/weather_3d/component_weather_overcast.gd" id="4_q2sg1"]
[ext_resource type="Script" path="res://common/component/weather_3d/thunder_flash_3d_vfx.gd" id="4_t4o85"]
[ext_resource type="PackedScene" uid="uid://dmfbntej2pnc5" path="res://content/vfx/weather_rain_3d_vfx.tscn" id="6_b7t8m"]
[ext_resource type="Script" path="res://common/component/weather_3d/vfx_rain.gd" id="6_h031o"]
[ext_resource type="PackedScene" uid="uid://cfe1msgrty8bu" path="res://content/vfx/weather_ripple_vfx.tscn" id="7_kgo47"]

[sub_resource type="Curve" id="Curve_gw4fh"]
_data = [Vector2(0.278257, 0.235305), 0.0, 0.0, 0, 0]
point_count = 1

[sub_resource type="Shader" id="Shader_xfvht"]
code = "shader_type spatial;

//render_mode ambient_light_disabled;


uniform vec4 albedo : source_color = vec4(1.0f);
uniform sampler2D albedo_texture : source_color, filter_nearest;
uniform bool clamp_diffuse_to_max = false;

uniform int cuts : hint_range(1, 8) = 3;
uniform float wrap : hint_range(-2.0f, 2.0f) = 0.0f;
uniform float steepness : hint_range(1.0f, 8.0f) = 1.0f;

uniform bool use_attenuation = true;

uniform bool use_specular = true;
uniform float specular_strength : hint_range(0.0f, 1.0f) = 1.0f;
uniform float specular_shininess : hint_range(0.0f, 32.0f) = 16.0f;
uniform sampler2D specular_map : source_color;

uniform bool use_rim = true;
uniform float rim_width : hint_range(0.0f, 16.0f) = 8.0f;
uniform vec4 rim_color : source_color = vec4(1.0f);

uniform bool use_ramp = false;
uniform sampler2D ramp : source_color;

uniform bool use_borders = false;
uniform float border_width = 0.01f;

varying vec3 vertex_pos;
varying vec3 normal;

float split_specular(float specular) {
	return step(0.5f, specular);
}

void vertex() {
	vertex_pos = VERTEX;
	normal = NORMAL;
}

void fragment() {
	ALBEDO = albedo.rgb * texture(albedo_texture, UV).rgb;
}

void light() {
	// Attenuation.
	float attenuation = 1.0f;
	if (use_attenuation) {
		attenuation = ATTENUATION;
	}

	// Diffuse lighting.
	float NdotL = dot(NORMAL, LIGHT);
	float diffuse_amount = NdotL + (attenuation - 1.0) + wrap;
	//float diffuse_amount = NdotL * attenuation + wrap;
	diffuse_amount *= steepness;
	float cuts_inv = 1.0f / float(cuts);
	float diffuse_stepped = clamp(diffuse_amount + mod(1.0f - diffuse_amount, cuts_inv), 0.0f, 1.0f);

	// Calculate borders.
	float border = 0.0f;
	if (use_borders) {
		float corr_border_width = length(cross(NORMAL, LIGHT)) * border_width * steepness;
		border = step(diffuse_stepped - corr_border_width, diffuse_amount)
				 - step(1.0 - corr_border_width, diffuse_amount);
	}

	// Apply diffuse result to different styles.
	vec3 diffuse = ALBEDO.rgb * LIGHT_COLOR / PI;
	if (use_ramp) {
		diffuse *= texture(ramp, vec2(diffuse_stepped * (1.0f - border), 0.0f)).rgb;
	} else {
		diffuse *= diffuse_stepped * (1.0f - border);
	}

	if (clamp_diffuse_to_max) {
		// Clamp diffuse to max for multiple light sources.
		DIFFUSE_LIGHT = max(DIFFUSE_LIGHT, diffuse);
	} else {
		DIFFUSE_LIGHT += diffuse;
	}

	// Specular lighting.
	if (use_specular) {
		vec3 H = normalize(LIGHT + VIEW);
		float NdotH = dot(NORMAL, H);
		float specular_amount = max(pow(NdotH, specular_shininess*specular_shininess), 0.0f)
							    * texture(specular_map, UV).r
								* attenuation;
		specular_amount = split_specular(specular_amount);
		SPECULAR_LIGHT += specular_strength * specular_amount * LIGHT_COLOR;
	}

	// Simple rim lighting.
	if (use_rim) {
		float NdotV = dot(NORMAL, VIEW);
		float rim_light = pow(1.0 - NdotV, rim_width);
		SPECULAR_LIGHT += rim_light * rim_color.rgb * rim_color.a * LIGHT_COLOR / PI; //Changed DIFFUSE_LIGHT to SPECULAR_LIGHT while migrating for similar result
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ofuvu"]
render_priority = 0
shader = SubResource("Shader_xfvht")
shader_parameter/albedo = Color(0.976471, 0.976471, 0.976471, 1)
shader_parameter/clamp_diffuse_to_max = false
shader_parameter/cuts = 3
shader_parameter/wrap = 0.0
shader_parameter/steepness = 1.0
shader_parameter/use_attenuation = false
shader_parameter/use_specular = false
shader_parameter/specular_strength = 1.0
shader_parameter/specular_shininess = 16.0
shader_parameter/use_rim = false
shader_parameter/rim_width = 8.0
shader_parameter/rim_color = Color(1, 1, 1, 1)
shader_parameter/use_ramp = true
shader_parameter/use_borders = false
shader_parameter/border_width = 0.01

[sub_resource type="RibbonTrailMesh" id="RibbonTrailMesh_y2phn"]
resource_local_to_scene = true
material = SubResource("ShaderMaterial_ofuvu")
size = 0.1
sections = 2
section_segments = 2
curve = SubResource("Curve_gw4fh")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_704jk"]
diffuse_mode = 3
albedo_color = Color(0.145098, 1, 0.380392, 1)
roughness = 0.0

[sub_resource type="BoxMesh" id="BoxMesh_7uu3v"]
material = SubResource("StandardMaterial3D_704jk")
size = Vector3(20, 0.2, 20)

[sub_resource type="Gradient" id="Gradient_fgx4x"]
interpolation_mode = 2
interpolation_color_space = 2
offsets = PackedFloat32Array(0.516234, 1)
colors = PackedColorArray(0, 0, 0, 1, 1, 1, 1, 0)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_wny5s"]
noise_type = 3
fractal_type = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_geg5j"]
seamless = true
seamless_blend_skirt = 1.0
color_ramp = SubResource("Gradient_fgx4x")
noise = SubResource("FastNoiseLite_wny5s")

[node name="root" type="Node3D" node_paths=PackedStringArray("env_node", "lighting_node", "cloud_node", "rain_node", "thunder_flash_node")]
script = ExtResource("1_undve")
env_node = NodePath("world_env")
lighting_node = NodePath("world_lighting")
cloud_node = NodePath("weather_overcast")
rain_node = NodePath("rain")
thunder_flash_node = NodePath("thunder_flash")

[node name="world_env" type="Node" parent="."]
script = ExtResource("1_qdd0a")

[node name="world_lighting" type="Node" parent="."]
script = ExtResource("2_6dd63")

[node name="thunder_flash" type="Node" parent="." node_paths=PackedStringArray("env_node", "light_node")]
script = ExtResource("4_t4o85")
env_node = NodePath("../world_env")
light_node = NodePath("../world_lighting")

[node name="rain" type="Node3D" parent="."]
script = ExtResource("6_h031o")

[node name="vfx_rain" parent="rain" instance=ExtResource("6_b7t8m")]
draw_pass_1 = SubResource("RibbonTrailMesh_y2phn")

[node name="vfx_rain_ripple" parent="rain" instance=ExtResource("7_kgo47")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
mesh = SubResource("BoxMesh_7uu3v")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(0.707107, -0.353553, 0.612372, 0, 0.866025, 0.5, -0.707107, -0.353553, 0.612372, 15, 13, 15)
projection = 1
size = 19.018

[node name="weather_overcast" type="Decal" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.775546, 0)
size = Vector3(100, 2, 100)
texture_albedo = SubResource("NoiseTexture2D_geg5j")
albedo_mix = 0.54
script = ExtResource("4_q2sg1")
